apiVersion: monitoring.appscode.com/v1alpha1
kind: Runbook
metadata:
  name: mongodb-phase-critical
spec:
  variables:
    - name: k8sKind
      valueFrom:
        alertPathRef:
          path: .labels.k8s_kind
    - name: app
      valueFrom:
        alertPathRef:
          path: .labels.app
    - name: appNamespace
      valueFrom:
        alertPathRef:
          path: .labels.app_namespace
    - name: k8sGroup
      valueFrom:
        alertPathRef:
          path: .labels.k8s_group
    - name: k8sResource
      valueFrom:
        alertPathRef:
          path: .labels.k8s_resource
  diagnosticChecks:
    - type: CheckStatusAnomalies
      args:
        fieldSelector: spec.databaseRef==${app}
        resourceNamespace: ${appNamespace}
        resourceGroup: ops.kubedb.com
        resourceKind: MongoDBOpsRequest
        anomalyRules:
          - conditionExpr: "status.phase == 'Progressing'"
            outputExpr: "status.phase"
    - type: CheckStatusAnomalies
      args:
        resourceGroup: ${k8sGroup}
        resourceKind: ${k8sKind}
        resourceName: ${app}
        resourceNamespace: ${appNamespace}
        anomalyRules:
          - conditionExpr: "status.conditions.exists(c, c.status=='False')"
            outputExpr: "status.conditions.filter(c, c.status=='False')"
    - type: CheckStatusAnomalies
      args:
        fieldSelector: status.phase!=Ready
        labelSelector: >-
          app.kubernetes.io/component=database,
          app.kubernetes.io/name=${k8sResource}.${k8sGroup},
          app.kubernetes.io/managed-by=${k8sGroup},
          app.kubernetes.io/instance=${app}
        resourceGroup: ""
        resourceKind: Pod
        resourceNamespace: ${appNamespace}
        anomalyRules:
          - conditionExpr: "status.conditions.exists(c, c.status=='False')"
            outputExpr: "status.conditions.filter(c, c.status=='False')"
    - type: CheckEvents
      args:
        maxEventLimit: 10
        fieldSelector: status.phase!=Ready
        labelSelector: >-
          app.kubernetes.io/component=database,
          app.kubernetes.io/name=${k8sResource}.${k8sGroup},
          app.kubernetes.io/managed-by=${k8sGroup},
          app.kubernetes.io/instance=${app}
        resourceGroup: ""
        resourceKind: Pod
        resourceNamespace: ${appNamespace}
  remedyActions:
    - type: RestartDatabase
      args:
        resourceKind: ${k8sKind}
        resourceName: ${app}
        resourceNamespace: ${appNamespace}
